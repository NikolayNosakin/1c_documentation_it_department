//Пароль
Процедура УстановитьПараметрСеансаСПаролем(Пароль) Экспорт
	ПараметрыСеанса.ПарольДляШифрования = Пароль;	
КонецПроцедуры

//шифрование
Процедура РасшифроватьВсеЗашифрованныеДанные() Экспорт
	
	ОбработатьСправочникУчетныеДанные(Ложь);
	
	ОбработатьСправочникУстройстваСУдаленнымУправлением(Ложь);
	
	ОбработатьСправочникУстройства(Ложь);
	
	ОбработатьСправочникСУБД(Ложь);
	
	ОбработатьСправочникСетевоеОборудование(Ложь);
		
	ОбработатьСправочникСерверыVPN(Ложь);
		
	ОбработатьСправочникСерверы(Ложь);
		
	ОбработатьСправочникПринтеры(Ложь);
		
	ОбработатьСправочникКассы(Ложь);
		
	ОбработатьСправочникДомены(Ложь);
		
	ОбработатьСправочникВидеорегистраторы(Ложь);
		
	ОбработатьСправочникБД(Ложь);
	
КонецПроцедуры

//ТипОбработки 
// Ложь - дешифровать
// истина - шифровать

Процедура ОбработатьПароли() Экспорт
	
	ОбработатьСправочникУчетныеДанные(ПолучитьНастройкуШифрованияСправочника("УчетныеДанные"));
	
	ОбработатьСправочникУстройстваСУдаленнымУправлением(ПолучитьНастройкуШифрованияСправочника("УстройстваСУдаленнымУправлением"));
	
	ОбработатьСправочникУстройства(ПолучитьНастройкуШифрованияСправочника("Устройства"));
	
	ОбработатьСправочникСУБД(ПолучитьНастройкуШифрованияСправочника("СУБД"));
	
	ОбработатьСправочникСетевоеОборудование(ПолучитьНастройкуШифрованияСправочника("СетевоеОборудование"));
		
	ОбработатьСправочникСерверыVPN(ПолучитьНастройкуШифрованияСправочника("СерверыVPN"));
		
	ОбработатьСправочникСерверы(ПолучитьНастройкуШифрованияСправочника("Серверы"));
		
	ОбработатьСправочникПринтеры(ПолучитьНастройкуШифрованияСправочника("Принтеры"));
		
	ОбработатьСправочникКассы(ПолучитьНастройкуШифрованияСправочника("Кассы"));
		
	ОбработатьСправочникДомены(ПолучитьНастройкуШифрованияСправочника("Домены"));
		
	ОбработатьСправочникВидеорегистраторы(ПолучитьНастройкуШифрованияСправочника("Видеорегистраторы"));
		
	ОбработатьСправочникБД(ПолучитьНастройкуШифрованияСправочника("БД"));
	
КонецПроцедуры

Процедура ОбработатьСправочникУчетныеДанные(ТипОбработки) Экспорт
	
	Запрос = Новый запрос("ВЫБРАТЬ
	|	УчетныеДанныеСервисов.Ссылка КАК Ссылка,
	|	УчетныеДанныеСервисов.Пароль КАК Пароль,
	|	УчетныеДанныеСервисов.ПарольЗашифрован КАК ПарольЗашифрован
	|ИЗ
	|	Справочник.УчетныеДанныеСервисов КАК УчетныеДанныеСервисов
	|ГДЕ
	|	УчетныеДанныеСервисов.ПарольЗашифрован = &ПарольЗашифрован
	|	И НЕ УчетныеДанныеСервисов.Пароль = """"");
	Запрос.УстановитьПараметр("ПарольЗашифрован",НЕ ТипОбработки);
	ЗВ = Запрос.Выполнить();
	Если ЗВ.Пустой() Тогда
		Возврат;
	КонецЕслИ;	
	Таб = ЗВ.Выгрузить();
	Для каждого стр из Таб Цикл
		Об = Стр.Ссылка.ПолучитьОбъект();
		Об.ПарольЗашифрован = ТипОбработки;
		Об.Пароль = ?(ТипОбработки,Зашифровать(стр.Пароль),Расшифровать(стр.Пароль));
		Об.Записать();		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСправочникУстройстваСУдаленнымУправлением(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникУстройства(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникСУБД(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникСетевоеОборудование(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникСерверыVPN(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникСерверы(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникПринтеры(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникКассы(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникДомены(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникВидеорегистраторы(ТипОбработки) Экспорт
КонецПроцедуры

Процедура ОбработатьСправочникБД(ТипОбработки) Экспорт
КонецПроцедуры

Функция Зашифровать(ТекстОригинальный) Экспорт
	МассивТекста = РазложитьТекстВМассивПодстрок(СокрЛП(ТекстОригинальный),символы.ПС);	
	Хеш = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеш.Добавить(ПараметрыСеанса.ПарольДляШифрования);
	КлючШифра = Хеш.ХешСумма; 
	МассивХеша = новый Массив;
	ХэшПароля = СтрЗаменить(КлючШифра," ","");
	МассивХеша = РазложитьСтрокуВМассивзнаков(ХэшПароля,МассивХеша);
	Возврат ЗашифроватьКонец(МассивТекста, МассивХеша);	
КонецФункции

Функция ЗашифроватьКонец(МассивСимволов,МассивХеша)
	ЗашифрованнаяСтрока = "";
	ГСЧ = Новый ГенераторСлучайныхЧисел(1);
	
	ПозицияСимволаХэша = 0;
	ДлинаХэша = МассивХеша.количество();
	для каждого ном из МассивСимволов Цикл
		//Извлекаем номр шифруемого символа  UTF-8
		НомерСимвола = КодСимвола(ном);
		Если  ПозицияСимволаХэша >= ДлинаХэша-1 тогда
			ПозицияСимволаХэша = 0;
		КонецЕсли;
		//Позиция суммируемого хеша
		ПозицияСимволаХэша = ПозицияСимволаХэша+1;
		//Извлекаем номр символа хеша UTF-8
		СимволаХэша = КодСимвола(МассивХеша[ПозицияСимволаХэша]); 
		
		//Суммируем СуммыПозиций кодов 
		Код_Зашифрованный_символ =  НомерСимвола+СимволаХэша;
		Зашифрованный_символ = Символ(Код_Зашифрованный_символ);
		ЗашифрованнаяСтрока= ЗашифрованнаяСтрока+Зашифрованный_символ;
		
		//Усложним шифр добавляя тенического мусора при условие что КодСимвола хеша четный;
		Если Цел(СимволаХэша/2) = СимволаХэша/2 тогда
			
			СлучайноеЧисло = ГСЧ.СлучайноеЧисло(100, 1000); 
			ЗашифрованнаяСтрока= ЗашифрованнаяСтрока+Символ(СлучайноеЧисло);
		КонецЕсли;	
	КонецЦикла;
	возврат ЗашифрованнаяСтрока;
КонецФункции

//дешифрование
Функция Расшифровать(ТекстШифрованный) Экспорт 
	Попытка
		МассивТекста = РазложитьТекстВМассивПодстрок(СокрЛП(ТекстШифрованный),символы.ПС);	
		Хеш = Новый ХешированиеДанных(ХешФункция.SHA256);
		Хеш.Добавить(ПараметрыСеанса.ПарольДляШифрования);
		КлючШифра = Хеш.ХешСумма; 
		МассивХеша = новый Массив;
		ХэшПароля = СтрЗаменить(КлючШифра," ","");
		МассивХеша = РазложитьСтрокуВМассивзнаков(ХэшПароля,МассивХеша);
		Возврат РасшифроватьКонец(МассивТекста, МассивХеша);
	Исключение
		Сообщить("Ошибка расшифровки. Не верный пароль.");
	КонецПопытки;
КонецФункции

Функция РасшифроватьКонец(МассивСимволов,МассивХеша)	
	РасшифроватьТекст = "";
	ПозицияСимволаХэша = 0;
	ДлинаХэша = МассивХеша.количество();
	пропуск = ложь;
	для каждого ном из МассивСимволов Цикл		
		Если пропуск тогда
			пропуск=ложь;
			продолжить;
		КонецЕсли;			
		НомерСимвола = КодСимвола(ном);
		Если  ПозицияСимволаХэша >= ДлинаХэша-1 тогда
			ПозицияСимволаХэша = 0;
		КонецЕсли;
		ПозицияСимволаХэша = ПозицияСимволаХэша+1;
		СимволаХэша = КодСимвола(МассивХеша[ПозицияСимволаХэша]); 		
		Код_Зашифрованный_символ =  НомерСимвола-СимволаХэша;
		Зашифрованный_символ = Символ(Код_Зашифрованный_символ);		
		РасшифроватьТекст = РасшифроватьТекст+Зашифрованный_символ;	
		Если Цел(СимволаХэша/2) = СимволаХэша/2 тогда
			пропуск = истина;
		КонецЕсли;			
	КонецЦикла;
	возврат РасшифроватьТекст; 
КонецФункции

//Служебные
Функция РазложитьТекстВМассивПодстрок(Знач Стр, Разделитель = "") Экспорт	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(Стр);
			прервать;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Стр,Поз-1));
		Стр = Сред(Стр,Поз+ДлинаРазделителя);
	КонецЦикла;
	МассивТекста = новый массив;
	для каждого ном из МассивСтрок Цикл
		Если  ном <> "" тогда
			МассивТекста = РазложитьСтрокуВМассивзнаков(ном,МассивТекста);
		КонецЕсли;
		МассивТекста.добавить(символы.ПС);
	КонецЦикла;	 	
	Возврат  МассивТекста;
КонецФункции

Функция РазложитьСтрокуВМассивзнаков(Знач Стр,МассивСтрок) Экспорт	
	Длинастроки = СтрДлина(Стр);
	Поз=0;
	Пока 1=1 Цикл
		Поз = Поз+1;
		Если Длинастроки=0 Тогда
			Если Стр <> "" тогда
				МассивСтрок.Добавить(Лев(Стр,1));
			КонецЕсли;
			Возврат МассивСтрок;
		КонецЕсли;
		Если Стр <> "" тогда
			МассивСтрок.Добавить(Лев(Стр,1));
		КонецЕсли;	
		Стр = Прав(Стр,Длинастроки-1);
		Длинастроки= Длинастроки-1;
	КонецЦикла;		
КонецФункции

Функция ПолучитьНастройкуШифрованияСправочника(Настройка) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Настройка", ?(ТипЗнч(Настройка) = Тип("Строка"),ПланыВидовХарактеристик.СправочникиДляШифрования[Настройка],Настройка));	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.СправочникиДляШифрования
	|
	|ГДЕ
	|	Настройка  = &Настройка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПустоеЗначение = ?(ТипЗнч(Настройка) = Тип("Строка"),ПланыВидовХарактеристик.СправочникиДляШифрования[Настройка],Настройка).ТипЗначения.ПривестиЗначение();
	
	Если Выборка.Количество() = 0 Тогда		
		Возврат ПустоеЗначение;	
	ИначеЕсли Выборка.Следующий() Тогда		
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;		
	Иначе
		Возврат ПустоеЗначение;		
	КонецЕсли;
	
КонецФункции
